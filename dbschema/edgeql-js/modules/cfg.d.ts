// GENERATED by @edgedb/generate v0.5.3

import * as $ from '../reflection';
import * as _ from '../imports';
import type * as _std from './std';
export declare type $AllowBareDDL = {
	AlwaysAllow: $.$expr_Literal<$AllowBareDDL>;
	NeverAllow: $.$expr_Literal<$AllowBareDDL>;
} & $.EnumType<'cfg::AllowBareDDL', ['AlwaysAllow', 'NeverAllow']>;
declare const AllowBareDDL: $AllowBareDDL;

export declare type $ConnectionTransport = {
	TCP: $.$expr_Literal<$ConnectionTransport>;
	TCP_PG: $.$expr_Literal<$ConnectionTransport>;
	HTTP: $.$expr_Literal<$ConnectionTransport>;
	SIMPLE_HTTP: $.$expr_Literal<$ConnectionTransport>;
	HTTP_METRICS: $.$expr_Literal<$ConnectionTransport>;
	HTTP_HEALTH: $.$expr_Literal<$ConnectionTransport>;
} & $.EnumType<'cfg::ConnectionTransport', ['TCP', 'TCP_PG', 'HTTP', 'SIMPLE_HTTP', 'HTTP_METRICS', 'HTTP_HEALTH']>;
declare const ConnectionTransport: $ConnectionTransport;

export declare type $QueryCacheMode = {
	InMemory: $.$expr_Literal<$QueryCacheMode>;
	RegInline: $.$expr_Literal<$QueryCacheMode>;
	PgFunc: $.$expr_Literal<$QueryCacheMode>;
	Default: $.$expr_Literal<$QueryCacheMode>;
} & $.EnumType<'cfg::QueryCacheMode', ['InMemory', 'RegInline', 'PgFunc', 'Default']>;
declare const QueryCacheMode: $QueryCacheMode;

export declare type $memory = $.ScalarType<'cfg::memory', _.edgedb.ConfigMemory>;
declare const memory: $.scalarTypeWithConstructor<$memory, string>;

export declare type $ConfigObjectλShape = $.typeutil.flatten<_std.$BaseObjectλShape & {}>;
declare type $ConfigObject = $.ObjectType<'cfg::ConfigObject', $ConfigObjectλShape, null, [..._std.$BaseObject['__exclusives__']]>;
declare const $ConfigObject: $ConfigObject;

declare const ConfigObject: $.$expr_PathNode<$.TypeSet<$ConfigObject, $.Cardinality.Many>, null>;

export declare type $AbstractConfigλShape = $.typeutil.flatten<
	$ConfigObjectλShape & {
		extensions: $.LinkDesc<$ExtensionConfig, $.Cardinality.Many, {}, false, true, false, false>;
		session_idle_timeout: $.PropertyDesc<_std.$duration, $.Cardinality.One, false, false, false, true>;
		session_idle_transaction_timeout: $.PropertyDesc<_std.$duration, $.Cardinality.One, false, false, false, true>;
		query_execution_timeout: $.PropertyDesc<_std.$duration, $.Cardinality.One, false, false, false, false>;
		listen_port: $.PropertyDesc<_std.$int32, $.Cardinality.One, false, false, false, true>;
		listen_addresses: $.PropertyDesc<_std.$str, $.Cardinality.Many, false, false, false, false>;
		auth: $.LinkDesc<$Auth, $.Cardinality.Many, {}, false, false, false, false>;
		allow_dml_in_functions: $.PropertyDesc<_std.$bool, $.Cardinality.AtMostOne, false, false, false, true>;
		allow_bare_ddl: $.PropertyDesc<$AllowBareDDL, $.Cardinality.AtMostOne, false, false, false, true>;
		apply_access_policies: $.PropertyDesc<_std.$bool, $.Cardinality.AtMostOne, false, false, false, true>;
		allow_user_specified_id: $.PropertyDesc<_std.$bool, $.Cardinality.AtMostOne, false, false, false, true>;
		cors_allow_origins: $.PropertyDesc<_std.$str, $.Cardinality.Many, false, false, false, false>;
		auto_rebuild_query_cache: $.PropertyDesc<_std.$bool, $.Cardinality.AtMostOne, false, false, false, true>;
		query_cache_mode: $.PropertyDesc<$QueryCacheMode, $.Cardinality.AtMostOne, false, false, false, true>;
		shared_buffers: $.PropertyDesc<$memory, $.Cardinality.AtMostOne, false, false, false, false>;
		query_work_mem: $.PropertyDesc<$memory, $.Cardinality.AtMostOne, false, false, false, false>;
		maintenance_work_mem: $.PropertyDesc<$memory, $.Cardinality.AtMostOne, false, false, false, false>;
		effective_cache_size: $.PropertyDesc<$memory, $.Cardinality.AtMostOne, false, false, false, false>;
		effective_io_concurrency: $.PropertyDesc<_std.$int64, $.Cardinality.AtMostOne, false, false, false, false>;
		default_statistics_target: $.PropertyDesc<_std.$int64, $.Cardinality.AtMostOne, false, false, false, false>;
		force_database_error: $.PropertyDesc<_std.$str, $.Cardinality.AtMostOne, false, false, false, true>;
		_pg_prepared_statement_cache_size: $.PropertyDesc<_std.$int16, $.Cardinality.One, false, false, false, true>;
		'<cfg[is cfg::ExtensionConfig]': $.LinkDesc<$ExtensionConfig, $.Cardinality.AtMostOne, {}, true, false, false, false>;
		'<cfg': $.LinkDesc<$.ObjectType, $.Cardinality.Many, {}, false, false, false, false>;
	}
>;
declare type $AbstractConfig = $.ObjectType<'cfg::AbstractConfig', $AbstractConfigλShape, null, [...$ConfigObject['__exclusives__']]>;
declare const $AbstractConfig: $AbstractConfig;

declare const AbstractConfig: $.$expr_PathNode<$.TypeSet<$AbstractConfig, $.Cardinality.Many>, null>;

export declare type $AuthλShape = $.typeutil.flatten<
	$ConfigObjectλShape & {
		priority: $.PropertyDesc<_std.$int64, $.Cardinality.One, true, false, true, false>;
		user: $.PropertyDesc<_std.$str, $.Cardinality.Many, false, false, true, true>;
		method: $.LinkDesc<$AuthMethod, $.Cardinality.AtMostOne, {}, true, false, true, false>;
		comment: $.PropertyDesc<_std.$str, $.Cardinality.AtMostOne, false, false, true, false>;
		'<auth[is cfg::AbstractConfig]': $.LinkDesc<$AbstractConfig, $.Cardinality.Many, {}, false, false, false, false>;
		'<auth[is cfg::Config]': $.LinkDesc<$Config, $.Cardinality.Many, {}, false, false, false, false>;
		'<auth[is cfg::InstanceConfig]': $.LinkDesc<$InstanceConfig, $.Cardinality.Many, {}, false, false, false, false>;
		'<auth[is cfg::DatabaseConfig]': $.LinkDesc<$DatabaseConfig, $.Cardinality.Many, {}, false, false, false, false>;
		'<auth[is cfg::BranchConfig]': $.LinkDesc<$BranchConfig, $.Cardinality.Many, {}, false, false, false, false>;
		'<auth': $.LinkDesc<$.ObjectType, $.Cardinality.Many, {}, false, false, false, false>;
	}
>;
declare type $Auth = $.ObjectType<
	'cfg::Auth',
	$AuthλShape,
	null,
	[
		...$ConfigObject['__exclusives__'],
		{ priority: { __element__: _std.$int64; __cardinality__: $.Cardinality.One | $.Cardinality.AtMostOne } },
		{ method: { __element__: $AuthMethod; __cardinality__: $.Cardinality.One | $.Cardinality.AtMostOne } }
	]
>;
declare const $Auth: $Auth;

declare const Auth: $.$expr_PathNode<$.TypeSet<$Auth, $.Cardinality.Many>, null>;

export declare type $AuthMethodλShape = $.typeutil.flatten<
	$ConfigObjectλShape & {
		transports: $.PropertyDesc<$ConnectionTransport, $.Cardinality.Many, false, false, true, false>;
		'<method[is cfg::Auth]': $.LinkDesc<$Auth, $.Cardinality.AtMostOne, {}, true, false, false, false>;
		'<method': $.LinkDesc<$.ObjectType, $.Cardinality.Many, {}, false, false, false, false>;
	}
>;
declare type $AuthMethod = $.ObjectType<'cfg::AuthMethod', $AuthMethodλShape, null, [...$ConfigObject['__exclusives__']]>;
declare const $AuthMethod: $AuthMethod;

declare const AuthMethod: $.$expr_PathNode<$.TypeSet<$AuthMethod, $.Cardinality.Many>, null>;

export declare type $DatabaseConfigλShape = $.typeutil.flatten<$AbstractConfigλShape & {}>;
declare type $DatabaseConfig = $.ObjectType<'cfg::DatabaseConfig', $DatabaseConfigλShape, null, [...$AbstractConfig['__exclusives__']]>;
declare const $DatabaseConfig: $DatabaseConfig;

declare const DatabaseConfig: $.$expr_PathNode<$.TypeSet<$DatabaseConfig, $.Cardinality.Many>, null>;

export declare type $BranchConfigλShape = $.typeutil.flatten<$DatabaseConfigλShape & {}>;
declare type $BranchConfig = $.ObjectType<'cfg::BranchConfig', $BranchConfigλShape, null, [...$DatabaseConfig['__exclusives__']]>;
declare const $BranchConfig: $BranchConfig;

declare const BranchConfig: $.$expr_PathNode<$.TypeSet<$BranchConfig, $.Cardinality.Many>, null>;

export declare type $ConfigλShape = $.typeutil.flatten<$AbstractConfigλShape & {}>;
declare type $Config = $.ObjectType<'cfg::Config', $ConfigλShape, null, [...$AbstractConfig['__exclusives__']]>;
declare const $Config: $Config;

declare const Config: $.$expr_PathNode<$.TypeSet<$Config, $.Cardinality.Many>, null>;

export declare type $ExtensionConfigλShape = $.typeutil.flatten<
	$ConfigObjectλShape & {
		cfg: $.LinkDesc<$AbstractConfig, $.Cardinality.One, {}, true, false, false, false>;
		'<extensions[is cfg::AbstractConfig]': $.LinkDesc<$AbstractConfig, $.Cardinality.Many, {}, false, false, false, false>;
		'<extensions[is cfg::Config]': $.LinkDesc<$Config, $.Cardinality.Many, {}, false, false, false, false>;
		'<extensions[is cfg::InstanceConfig]': $.LinkDesc<$InstanceConfig, $.Cardinality.Many, {}, false, false, false, false>;
		'<extensions[is cfg::DatabaseConfig]': $.LinkDesc<$DatabaseConfig, $.Cardinality.Many, {}, false, false, false, false>;
		'<extensions[is cfg::BranchConfig]': $.LinkDesc<$BranchConfig, $.Cardinality.Many, {}, false, false, false, false>;
		'<extensions': $.LinkDesc<$.ObjectType, $.Cardinality.Many, {}, false, false, false, false>;
	}
>;
declare type $ExtensionConfig = $.ObjectType<
	'cfg::ExtensionConfig',
	$ExtensionConfigλShape,
	null,
	[...$ConfigObject['__exclusives__'], { cfg: { __element__: $AbstractConfig; __cardinality__: $.Cardinality.One | $.Cardinality.AtMostOne } }]
>;
declare const $ExtensionConfig: $ExtensionConfig;

declare const ExtensionConfig: $.$expr_PathNode<$.TypeSet<$ExtensionConfig, $.Cardinality.Many>, null>;

export declare type $InstanceConfigλShape = $.typeutil.flatten<$AbstractConfigλShape & {}>;
declare type $InstanceConfig = $.ObjectType<'cfg::InstanceConfig', $InstanceConfigλShape, null, [...$AbstractConfig['__exclusives__']]>;
declare const $InstanceConfig: $InstanceConfig;

declare const InstanceConfig: $.$expr_PathNode<$.TypeSet<$InstanceConfig, $.Cardinality.Many>, null>;

export declare type $JWTλShape = $.typeutil.flatten<
	Omit<$AuthMethodλShape, 'transports'> & {
		transports: $.PropertyDesc<$ConnectionTransport, $.Cardinality.Many, false, false, true, true>;
	}
>;
declare type $JWT = $.ObjectType<'cfg::JWT', $JWTλShape, null, [...$AuthMethod['__exclusives__']]>;
declare const $JWT: $JWT;

declare const JWT: $.$expr_PathNode<$.TypeSet<$JWT, $.Cardinality.Many>, null>;

export declare type $PasswordλShape = $.typeutil.flatten<
	Omit<$AuthMethodλShape, 'transports'> & {
		transports: $.PropertyDesc<$ConnectionTransport, $.Cardinality.Many, false, false, true, true>;
	}
>;
declare type $Password = $.ObjectType<'cfg::Password', $PasswordλShape, null, [...$AuthMethod['__exclusives__']]>;
declare const $Password: $Password;

declare const Password: $.$expr_PathNode<$.TypeSet<$Password, $.Cardinality.Many>, null>;

export declare type $SCRAMλShape = $.typeutil.flatten<
	Omit<$AuthMethodλShape, 'transports'> & {
		transports: $.PropertyDesc<$ConnectionTransport, $.Cardinality.Many, false, false, true, true>;
	}
>;
declare type $SCRAM = $.ObjectType<'cfg::SCRAM', $SCRAMλShape, null, [...$AuthMethod['__exclusives__']]>;
declare const $SCRAM: $SCRAM;

declare const SCRAM: $.$expr_PathNode<$.TypeSet<$SCRAM, $.Cardinality.Many>, null>;

export declare type $TrustλShape = $.typeutil.flatten<$AuthMethodλShape & {}>;
declare type $Trust = $.ObjectType<'cfg::Trust', $TrustλShape, null, [...$AuthMethod['__exclusives__']]>;
declare const $Trust: $Trust;

declare const Trust: $.$expr_PathNode<$.TypeSet<$Trust, $.Cardinality.Many>, null>;

export declare type $mTLSλShape = $.typeutil.flatten<
	Omit<$AuthMethodλShape, 'transports'> & {
		transports: $.PropertyDesc<$ConnectionTransport, $.Cardinality.Many, false, false, true, true>;
	}
>;
declare type $mTLS = $.ObjectType<'cfg::mTLS', $mTLSλShape, null, [...$AuthMethod['__exclusives__']]>;
declare const $mTLS: $mTLS;

declare const mTLS: $.$expr_PathNode<$.TypeSet<$mTLS, $.Cardinality.Many>, null>;

declare type get_config_jsonλFuncExpr<
	NamedArgs extends {
		sources?: $.TypeSet<$.ArrayType<_std.$str>>;
		max_source?: _.castMaps.orScalarLiteral<$.TypeSet<_std.$str>>;
	}
> = $.$expr_Function<
	_std.$json,
	$.cardutil.multiplyCardinalities<
		$.cardutil.optionalParamCardinality<NamedArgs['sources']>,
		$.cardutil.optionalParamCardinality<NamedArgs['max_source']>
	>
>;
declare function get_config_json<
	NamedArgs extends {
		sources?: $.TypeSet<$.ArrayType<_std.$str>>;
		max_source?: _.castMaps.orScalarLiteral<$.TypeSet<_std.$str>>;
	}
>(namedArgs: NamedArgs): get_config_jsonλFuncExpr<NamedArgs>;

export {
	AllowBareDDL,
	ConnectionTransport,
	QueryCacheMode,
	memory,
	$ConfigObject,
	ConfigObject,
	$AbstractConfig,
	AbstractConfig,
	$Auth,
	Auth,
	$AuthMethod,
	AuthMethod,
	$DatabaseConfig,
	DatabaseConfig,
	$BranchConfig,
	BranchConfig,
	$Config,
	Config,
	$ExtensionConfig,
	ExtensionConfig,
	$InstanceConfig,
	InstanceConfig,
	$JWT,
	JWT,
	$Password,
	Password,
	$SCRAM,
	SCRAM,
	$Trust,
	Trust,
	$mTLS,
	mTLS
};

declare type __defaultExports = {
	AllowBareDDL: typeof AllowBareDDL;
	ConnectionTransport: typeof ConnectionTransport;
	QueryCacheMode: typeof QueryCacheMode;
	memory: typeof memory;
	ConfigObject: typeof ConfigObject;
	AbstractConfig: typeof AbstractConfig;
	Auth: typeof Auth;
	AuthMethod: typeof AuthMethod;
	DatabaseConfig: typeof DatabaseConfig;
	BranchConfig: typeof BranchConfig;
	Config: typeof Config;
	ExtensionConfig: typeof ExtensionConfig;
	InstanceConfig: typeof InstanceConfig;
	JWT: typeof JWT;
	Password: typeof Password;
	SCRAM: typeof SCRAM;
	Trust: typeof Trust;
	mTLS: typeof mTLS;
	get_config_json: typeof get_config_json;
};
declare const __defaultExports: __defaultExports;
export default __defaultExports;
