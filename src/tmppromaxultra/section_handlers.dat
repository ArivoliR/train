{"skiplist": ["VLK SIDING", "MS GSN YD", "MS-MSB-MKK-YD", "AJJ North Cabin", "KOK-TNP YD", "ENR-TVT-KOK", "BBQ CHG YD", "BBG CHQ YD", "VPY-KOK-TNP", "BBQ-CHG-YD"], "acceptor": {"AB ": ["AB YD", "AB YD"], "AJJ INTER YD": ["AJJ INTER YD", "AJJ INTER YD"], "KV N YD": "KVN YD", "AJJ ": ["AJJ YD", "AJJ YD"], "MKK": ["MKK YD", "MKK YD"], "MLMR": ["MLMR YD", "MLMR YD"], "WJ R YD": ["WJR YD", "WJR YD"], "MS": ["MS YD", "MS YD"], "CGL-YD-SKL": ["CGL YD", "SKL"], "AJJ (N)-TRT": ["AJJ North", "TRT"], "JTJ TD ": ["JTJ YD", "JTJ YD"], "PV-STM &PV YD": "PV YD", "AVD-PAB PAB YARD": ["PAB YD", "PAB YD"], "ENR-AIPP YD": ["ENR", "AIPP YD"], "PCKM-YD-AB": ["PCKM YD", "AB"], "ABU-YD-VLK": ["ABU YD", "VLK"], "CGL-YD -SKL": ["CGL YD", "SKL"], "AJJ East Yard": ["AJJ East YD", "AJJ East YD"], "PCKM-MPI MPI Yard": ["MPI YD", "MPI YD"], "AJJ EAST YD": ["AJJ East YD", "AJJ East YD"], "PALR Yard & PALR-WJ": ["PALR", "WJ"], "KVN-LTI YD": ["KVN", "LTI YD"], "KBT yard & KBT-TO": ["KBT", "TO"], "POI-TRT&TRT YD": ["POI", "TRT"], "ABU Yd and ABU-VLK": ["ABU", "VLK"], "AJJ E YD": ["AJJ East YD", "AJJ East YD"], "AJJ NORTH YD": ["AJJ North YD", "AJJ North YD"], "AJJ INTER YARD": ["AJJ Inter YD", "AJJ Inter YD"], "POI-TRT & TRT YD": ["POI", "TRT"], "Ajj East yard": ["AJJ East YD", "AJJ East YD"], "PALR-WJ YD": ["PALR", "WJ YD"], "AJJ (N)-AJJ": ["AJJ North", "AJJ"], "VLK YG": ["VLK YD", "VLK YD"], "CTRE-MLPM & MLPM yard": ["CTRE", "MLPM"], "PAB-AVD & AVD YD": ["PAB", "AVD"], "ABU-VLK VLK YD": ["ABU", "VLK"], "JTJ EAST YD": ["JTJ East YD", "JTJ East YD"], "TVT-ENR,TVT YD": ["TVT", "ENR"], "MLMR MMK": ["MLMR", "MMK"], "CGL NORTH YD": ["CGL North YD", "CGL North YD"]}, "handlers": [[], ["def skipper(raw: str):\n    pass\n\ndef parser(raw: str):\n    raw = raw.strip()\n    a, _, b = raw.partition('-')\n    a = a.strip().replace(\"-\", \" \").replace(\"_\", \" \")\n    b = b.strip().replace(\"-\", \" \").replace(\"_\", \" \")\n    _ = _.strip()\n\n    if not _ or not b: return None\n\n    if a.count(\" \") == 0 and b.count(\" \") == 0:\n        return a.upper(), b.upper()\n\n", "def skipper(raw: str):\n    pass\n\ndef parser(raw: str):\n    raw = raw.strip().replace(\"-\", \" \").replace(\"_\", \" \").upper()\n    yard_endings = [\"YD\", \"YARD\", \"Y D\"]\n    for ed in yard_endings:\n        if raw.endswith(ed):\n            raw = raw.removesuffix(ed).strip()\n            if raw.count(\" \") == 0:\n                return raw + \" YD\", raw + \" YD\"\n\n", "def skipper(raw: str):\n    pass\n\ndef parser(raw: str):\n    _, _, raw = raw.partition(\"/\")\n    raw = raw.strip().replace(\"-\", \" \").replace(\"_\", \" \").upper()\n    yard_endings = [\"YD\", \"YARD\", \"Y D\"]\n    for ed in yard_endings:\n        if raw.endswith(ed):\n            raw = raw.removesuffix(ed).strip()\n            if raw.count(\" \") == 0:\n                return raw + \" YD\", raw + \" YD\"\n\n", "def skipper(raw: str):\n    pass\n\ndef parser(raw: str):\n    raw = raw.replace(\"-\", \" \").replace(\"_\", \" \").strip().upper()\n    if raw.count(\" \") == 0:\n        return raw + \"YD\", raw + \"YD\"\n\n    \n\n", "def skipper(raw: str):\n    pass\n\ndef parser(raw: str):\n    raw, _, _ = raw.partition(\"/\")\n    raw = raw.strip().replace(\"-\", \" \").replace(\"_\", \" \").upper()\n    yard_endings = [\"YD\", \"YARD\", \"Y D\"]\n    for ed in yard_endings:\n        if raw.endswith(ed):\n            raw = raw.removesuffix(ed).strip()\n            if raw.count(\" \") == 0:\n                return raw + \" YD\", raw + \" YD\"\n\n"]]}